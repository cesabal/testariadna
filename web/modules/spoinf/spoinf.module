<?php


use Drupal\Core\Entity\Query\QueryFactory;
use Drupal\Core\Database\Database;

use Drupal\Core\Block\BlockBase;
use Drupal\spoinf\inc\SpoInfWs;
use Drupal\taxonomy\Entity\Term;

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
* Implementation of hook_install().
*/
function spoinf_install() {
	// crear tabla en la base de  datos.
	// drupal_install_schema('spoinf');


}

/**
* Implementation of hook_node_view().
*/
function spoinf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){

	// Si la entidad es un dono
	if ($entity instanceof \Drupal\node\NodeInterface) {
	

		// Si el nodo es de tipo playlist
		if( $entity->bundle() == 'playlist' )
		{

			$fieldCategory = $entity->get('field_categoria')->getValue();
			$categorytargetId = $fieldCategory[0]['target_id'];

			$term = Term::load( $categorytargetId );
			$name = $term->getName();

			list( $categoryText, $categoryidonNode ) = explode( "-", $name);
			
			$connection = \Drupal::database();
			
			$data = $connection->select('categorias_spotify', 'cs')
				->fields('cs', array('visits'))
				->condition('cs.category_id', $categoryidonNode, '=')
				->execute();

			// Execute the statement
			// $data = $connection->execute();

			// Get all the results
			$results = $data->fetchAll(\PDO::FETCH_OBJ);

			if( empty( $results ) )
			{
				$result = $connection->insert('categorias_spotify')
					->fields([
						'category_id' => $categoryidonNode,
						'json' => REQUEST_TIME,
						'last_visit' => mktime(),
						'visits' => 0
					])
					->execute();
			}
			else
			{
				$visitas = $results[0]->visits;
				
				$visitas++;
				
				echo '<pre>visitas '; print_r($visitas); echo '</pre>';

				$updated = $connection->update('categorias_spotify')
					->fields([
						'visits' => $visitas,
					])
					->condition('category_id', $categoryidonNode, '=')
					->execute();

			}

			// Hace que no cahcee a entity_view
			$renderer = \Drupal::service('renderer');
			$renderer->addCacheableDependency( $build, $entity->nid );

		}
	}

}

/**
* Implementation of hook_uninstall().
*/
function spoinf_uninstall() {

	// Remover tablas de la base de datos
	// drupal_uninstall_schema('spoinf');

	// borra todas las categorias cargas das de spotify
	
	// $vocabulary = taxonomy_vocabulary_machine_name_load('categoria_spotify');
	// foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
	//   taxonomy_term_delete($term->tid);
	// }

	$result = \Drupal::entityQuery('taxonomy_term')
		->condition('vid', 'categoria_spotify')
		->execute();
	
	entity_delete_multiple('taxonomy_term', $result);
}

/**
* Implementation of hook_schema().
*/
function spoinf_schema() {

	$schema['categorias_spotify'] = array(
		'description' => t('Stores site types of the social_site module.'),
		'fields' => array(
			'node_id' => array(
				'description' => 'El id de nodo.',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE
			),
			'category_id' => array(
				'description' => 'Id de categoría.',
				'type' => 'varchar',
				'length' => 20,
				'not null' => TRUE,
				'default' => ''
			),
			'json' => array(
				'description' => 'El json desde el api.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => ''
			)
	    ),
	    'primary key' => array('node_id'),

	);

	return $schema;
}

/**
 * Implementation of update_N()
 * Agrega dos campos a la tabla categorias_spotify, last_visit y visists
 */
function spoinf_update_8101(&$sandbox) {
	
	$newFieldLastVisit = array(
		'type' => 'int',
		'description' => 'Id de categoría.',
		'not null' => TRUE,
		'default' => 0
	);

	$newFieldVisits = array(
		'type' => 'int',
		'description' => 'Id de categoría.',
		'not null' => TRUE,
		'default' => 0
	);

	$schema = Database::getConnection()->schema();

	$schema->addField('categorias_spotify', 'last_visit', $newFieldLastVisit);
	$schema->addField('categorias_spotify', 'visits', $newFieldVisits);

}